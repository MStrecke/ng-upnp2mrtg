#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
######################################################################
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
######################################################################

# name/IP and port of router
HOST = "192.168.0.1"
PORT = 49300

# name of the box, used as is in html page generated by mrtg
TARGET_NAME = "NetCologne Box"

# prints lots of stuff
DEBUG = False

#
__VERSION__ = '0.2'

# 0.1  2009.03.29   first versuib
# 0.2  2009.03.31   added: fritzbox

import socket
import re

def dhms(sec):
    """ return number of seconds as (days,hours,minutes,seconds)
    """
    if sec is None: return (0,0,0,0)

    min = sec / 60
    sec %= 60
    ho = min / 60
    min %= 60
    day = ho / 24
    ho %= 24

    return (day, ho, min, sec)

def none2unknown(val):
    """ return value as is, except if value is None
        rrdtools/mrtg wants UNKNOWN in this case
    """
    if val is None: return "UNKNOWN"
    return val

def response_code(msg):
    """ extract response code from HTTP response
         example: HTTP/1.1 200 OK
        -> 200: ok
        -> -1: error during decode
        -> any other is considered not ok
    """
    if msg is None: return 0

    match = re.match('^HTTP/1\.[0|1]\s+(\d+)',msg)
    if match is None: return 0
    return int(match.group(1))

def gettag(answer,tag):
    """ find <tag>result</tag> in answer
    """

    if (answer is None) or (tag is None): return None

    # extract part between <tag> and </tag>
    tag1 = "<%s>" % (tag,)
    tag2 = "</%s>" % (tag,)
    po1 = answer.find(tag1) + len(tag1)
    if po1<0 : return None      # opening tag not found
    po2 = answer.find(tag2,po1)
    if po2<0 : return None      # closing tag not found

    return answer[po1:po2]


class upnpclient(object):
    def __init__(self,host,port):
        self.host = host
        self.port = port

    def create_message(self,serviceurl,schema,action):
        body="""<?xml version="1.0"?>
    <s:Envelope
        xmlns:s="http://schemas.xmlsoap.org/soap/envelope/"
        s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/">
    <s:Body>
       <u:%s xmlns:u="urn:schemas-upnp-org:service:%s" />
    </s:Body>
</s:Envelope>""" % (action,schema)

        pream = """POST /%s HTTP/1.0
HOST: %s:%s
CONTENT-LENGTH: %s
CONTENT-TYPE: text/xml; charset="utf-8"
SOAPACTION: "urn:schemas-upnp-org:service:%s#%s"

""".replace("\n","\r\n") % (serviceurl,self.host,self.port,len(body),schema,action)

        dat = "%s%s" % (pream,body)

        return dat

    def send(self,cmd):
        """ send command to host:port and wait for the answer
        """

        # create TCP socket and connect to host:port
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        s.connect((self.host,self.port))

        # send text
        s.send(cmd)

        # receive answer
        resp = ""
        while True:
            data = s.recv(1024)                 # receive up to 1K bytes
            if len(data) == 0: break
            resp += data
        s.close()

        return resp

    def send_command(self,serviceurl,schema,action,tag):
        """ send command to router and analyse the result
            returns the value between <tag> and </tag>
            or None on error

            tag can be a single string (in this case the function returns a string)
            or a tuple of strings (in this case a tuple of results is returned)
        """

        cmd = self.create_message(serviceurl,schema,action)
        if DEBUG: print cmd
        try:
            res = self.send(cmd)
        except socket.error, msg:
            print 'Socket error:', msg
            return None
        if DEBUG: print res

        # check return code
        ret_code = response_code(res)
        if DEBUG: print 'repsonse code:',ret_code
        if ret_code != 200: return None

        if tag is None: return res  # debug

        if type(tag) is tuple:
            answer = []
            for t in tag:
                answer.append( gettag(res,t) )
            if DEBUG: return answer
            return tuple(answer)
        else:
            if DEBUG: return gettag(res,tag)
            return gettag(res,tag)

def contact_nc_router(host,port,target_name):
    uc = upnpclient(host,port)

    inbytes = uc.send_command("WANCommonInterfaceConfigService/control",
           "WANCommonInterfaceConfig:1",
           "GetTotalBytesReceived",
           "NewTotalBytesReceived")

    outbytes = uc.send_command("WANCommonInterfaceConfigService/control",
           "WANCommonInterfaceConfig:1",
           "GetTotalBytesSent",
           "NewTotalBytesSent")

    uptime = uc.send_command("WANIPConnectionService/control",   # controlurl
           "WANIPConnection:1",  # servicetype
           "GetStatusInfo",
           "NewUptime")

    try:
        uptime = int(uptime)
    except (ValueError,TypeError):
        uptime = None
    if uptime is None: uptime = 0

    # see mrtg-reference: External Monitoring Scripts
    # 1: variable 1, usually incoming bytes count
    # 2: variable 2, usually outgoing bytes count
    # 3: uptime in human readble format (string is displayed as is)
    # 4: name of target (string is displayed as is)
    #
    print none2unknown(inbytes)
    print none2unknown(outbytes)
    print "%s days %02d:%02d:%02d h" % dhms(uptime)
    print target_name

def contact_fritz_router(host,port,target_name):
    # NOT TESTED

    uc = upnpclient(host,port)

    inbytes, outbytes = uc.send_command("upnp/control/WANCommonIFC1",
           "WANCommonInterfaceConfig:1",
           "GetAddonInfos",
           ('NewTotalBytesReceived','NewTotalBytesSent'))

    uptime = uc.send_command("upnp/control/WANIPConn1",
           "WANIPConnection:1",
           "GetStatusInfo",
           'NewUptime')
    try:
        uptime = int(uptime)
    except (ValueError,TypeError):
        uptime = None
    if uptime is None: uptime = 0

    print none2unknown(inbytes)
    print none2unknown(outbytes)
    print "%s days %02d:%02d:%02d h" % dhms(uptime)
    print target_name

if __name__ == "__main__":
    contact_nc_router(HOST,PORT,TARGET_NAME)
#    contact_fritz_router("192.168.0.99",49000,"Fritz-Box")
